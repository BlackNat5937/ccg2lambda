#
#  Copyright 2015 Koji Mineshima
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.


##### Semantic templates for English #####

## Basic logical form:
##
## Type T ::= Entity | Event | Prop | T -> T
## 
## Variables    Type
## x,y,z,x1,x2  Entity, E
## v,v1,v2      Event, Ev
## F,G,F1,F2    E -> Prop
## K,K1,K2      Ev -> Prop
## Q,Q1,Q2      (E -> Prop) -> (E -> Prop) -> Prop (= NP*)
## S,S1,S2      (Ev -> Prop) -> Prop (= S*)
## V1           ((E -> Prop) -> (E -> Prop) -> Prop) -> (Ev -> Prop) -> Prop (= NP* -> S*)
## V2           ((E -> Prop) -> (E -> Prop) -> Prop) -> ((E -> Prop) -> (E -> Prop) -> Prop) -> (Ev -> Prop) -> Prop (= NP* -> NP* -> S*)
## E            expression (surface form)

# Cat      Term : Type
# S        \K. exists v.(E(v) & K(v)) : (Ev -> Prop) -> Prop (= S*)
# N        \x. E(x)
# NP       \F1 F2. exists x.(E(x) & F1(x) & F2(x)) : (E -> Prop) -> (E -> Prop) -> Prop (= NP*)
# S\NP     \Q K. exists v. Q(\x.TrueP, \x.exists v.(E(v) & (Top(v) = x) & K(v))) : NP* -> S*
# S\NP\NP  \Q1 Q2 K. exists v. Q2(\y.TrueP, \y.Q1(\x.TrueP, \x.exists v.(E(v) & (Top(v) = x) & (Acc(v) = y) & K(v)))) : NP* -> NP* -> S*
# S/S      \S K. S(\v.(E(v) & K(v))) : S* -> S*
# NP/NP    \Q F1 F2. Q(\x.(E(x) & F1(x)), F2) : NP* -> NP*
# PP       \v.E(v) : Event -> Prop

## event predicate: \K. exists v. (E(v) & Cul(v) & Past(v) & K(v))
## state predicate: \K. exists v. (E(v) & Hold(v) & Past(v) & K(v))


## Rule中のアルファベット：
## L := Left child node
## R := Right child node 
##################################################################

########## Sentence final operation ############

- category: S[dcl=true]
  rule: ba
  semantics: \L R. R(L,\v.TrueP)
  child_any_category: NP
  root: "true"

- category: S[dcl=true]
  rule: fa
  semantics: \L R. L(R,\v.TrueP)
  child_any_category: NP
  root: "true"

############### Unary lexical rule #################

## existential type-raising from N to NP
- category: NP
  rule: lex
  semantics: \E F1 F2. exists x. (E(x) & F1(x) & F2(x))

## Unary rule for negative NPs
- category: NP
  rule: lex
  semantics: \C F1 F2. - exists x. (C(x) & F1(x) & F2(x))
  child_any_base: few

## Unary rule for proportional NPs
- category: NP
  rule: lex
  semantics: \C. C
  child_any_base: most

# ## existential type-raising for proper nouns from N to NP
# - category: NP
#   rule: lex
#   semantics: \E F1 F2. (F1(E) & F2(E))
#   # semantics: \E F1 F2. exists x. ((x = E) & F1(E) & F2(E))
#   child0_pos: NNP

# - category: NP
#   rule: lex
#   semantics: \E F1 F2. exists x. ((x = E) & F1(E) & F2(E))
#   child0_pos: CD

- category: NP
  rule: lex
  semantics: \E F1 F2. exists x. ((x = E) & F1(E) & F2(E))
  child_any_pos: NNP
  child_any_base: either

## S[to]\NP => N\N
- category: N\N
  rule: lex
  semantics: \V F x. (V(\G1 G2.G2(x), \v.TrueP) & F(x))

## S[ng]\NP => NP
- category: NP
  rule: lex
  semantics: \V F1 F2. exists x. (V(\G1 G2.G2(x), \v.TrueP) & F1(x) & F2(x))
  child0_category: S[ng=true]\NP

## S[pss,adj,ng]\NP => NP\NP; S[dcl]/NP => NP\NP
- category: NP\NP
  rule: lex
  semantics: \V Q F1 F2. Q(\x.(V(\G1 G2.G2(x), \v.TrueP) & F1(x)), F2)

## NP => NP/(NP\NP)
- category: NP/(NP\NP)
  rule: lex
  semantics: \Q M F1 F2. Q(\x.(M(\G1.G2(x),F1)), F2)

## S ==> S\S
- category: S\S
  rule: lex
  semantics: \S1 S2 K. (S1(K) & S2(K))
  # semantics: \S1 S2 K. (S1(\v.TrueP) & S2(K))

## S\NP ==> (S\NP)\(S\NP)
- category: (S\NP)\(S\NP)
  rule: lex
  semantics: \V1 V2 Q K. (V1(Q,K) & V2(Q,K))

## S[ng]\NP => (S\NP)\(S\NP)
- category: (S\NP)\(S\NP)
  rule: lex
  semantics: \V1 V2 Q K. Q(\x.TrueP, \x.(V1(\F1 F2.F2(x), \v.TrueP) & V2(\F1 F2.F2(x), K)))
  child0_category: S[ng=true]\NP

## NP => S[X=true]/(S[X=true]\NP)
- category: S/(S\NP)
  rule: tr
  semantics: \Q V K. V(Q,K)

## NP => S[X=true]/(S[X=true]/NP)
- category: S/(S/NP)
  rule: tr
  semantics: \Q V K. V(Q,K)

## PP => (S[X=true]\NP)\((S[X=true]\NP)/PP)
- category: (S\NP)\((S\NP)/PP)
  rule: tr
  semantics: \K1 M Q K2. M(K1, Q, K2)

##### Binary lexical rules #####

## universal interpretattion of plural definite descriptions
- category: NP
  rule: fa
  # semantics: \L F1 F2 F3. forall x. (F1(x) & F2(x) -> F3(x))
  semantics: \L F1 F2 F3. forall x. (F1(x) -> (F2(x) -> F3(x)))
  child0_surf: the
  child_any_pos: NNPS

## Conjunction

- category: S\S
  rule: conj
  semantics: \L S2 S1 K. (S1(K) & S2(K))
  child0_surf: and

- category: S\S
  rule: conj
  semantics: \L S2 S1 K. (S1(K) & S2(K))
  child0_surf: but

- category: NP\NP
  rule: conj
  semantics: \L Q2 Q1 F1 F2. (Q1(F1,F2) & Q2(F1,F2))
  child0_surf: and

- category: NP\NP
  rule: conj
  semantics: \L Q2 Q1 F1 F2. (Q1(F1,F2) & Q2(F1,F2))
  child0_surf: but

- category: N\N
  rule: conj
  semantics: \L F1 F2 x. (F1(x) & F2(x))
  child0_surf: and

- category: (S\NP)\(S\NP)
  rule: conj
  # semantics: \L V2 V1 Q K. (V1(Q,K) & V2(Q,K)) # SICK-6358
  semantics: \L V2 V1 Q K. Q(\x.TrueP, \x.(V1(\F1 F2.F2(x),K) & V2(\F1 F2.F2(x),K))) # SICK-7649
  child0_surf: and

- category: (N/N)\(N/N)
  rule: conj
  semantics: \L M1 M2 F x. M1(M2(F),x)
  child0_surf: and

- category: (N/N)/(N/N)
  rule: conj
  semantics: \L M1 M2 F x. M1(M2(F),x)
  child0_surf: and

- category: (NP\NP)\(NP\NP)
  rule: conj
  semantics: \L M2 M1 Q F1 F2. (M1(Q,F1,F2) & M2(Q,F1,F2))
  child0_surf: and

- category: (NP/N)\(NP/N)
  rule: conj
  semantics: \L D2 D1 F G1 G2. (D1(F,G1,G2) & D2(F,G1,G2))
  child0_surf: and

- category: ((S\NP)/NP)\((S\NP)/NP)
  rule: conj
  semantics: \L V2 V1 Q1 Q2 K. Q2(\x.TrueP,\x.Q1(\y.TrueP,\y.(V1(\F1 F2.F2(y),\F1 F2.F2(x),K) & V2(\F1 F2.F2(y),\F1 F2.F2(x),K))))
  child0_surf: and

- category: ((S\NP)\(S\NP))\((S\NP)\(S\NP))
  rule: conj
  semantics: \L M2 M1 V Q K. (M1(V,Q,K) & M2(V,Q,K))
  child0_surf: and

- category: (((S\NP)\(S\NP))/NP)\(((S\NP)\(S\NP))/NP)
  rule: conj
  semantics: \L M2 M1 Q1 V Q2 K. (M1(Q1,V,Q2,K) & M2(Q1,V,Q2,K))
  child0_surf: and


## Disjunction

- category: S\S
  rule: conj
  # semantics: \L S1 S2. (S1 & S2)
  semantics: \L S2 S1 K. (S1(K) | S2(K))
  child0_surf: or
  # bak1-2-11

- category: NP\NP
  rule: conj
  semantics: \L Q2 Q1 F1 F2. (Q1(F1, F2) | Q2(F1, F2))
  child0_surf: or

- category: N/N
  rule: conj
  semantics: \L F2 F1 x. (F1(x) | F2(x))
  child0_surf: or

- category: N\N
  rule: conj
  semantics: \L F2 F1 x. (F1(x) | F2(x))
  child0_surf: or

- category: (S\NP)\(S\NP)
  rule: conj
  semantics: \L V2 V1 Q K. Q(\x.TrueP, \x.(V1(\F1 F2.F2(x),K) | V2(\F1 F2.F2(x),K)))
  child0_surf: or

- category: (N/N)\(N/N)
  rule: conj
  semantics: \L M2 M1 F x. (M1(F,x) | M2(F,x))
  child0_surf: or

- category: (N/N)/(N/N)
  rule: conj
  semantics: \L M1 M2 F x. M1(M2(F),x)
  child0_surf: or

- category: PP\PP
  rule: conj
  semantics: \L K2 K1 v. (K1(v) | K2(v))
  child0_surf: or

# sententce final particle
- category: S
  rule: rp
  semantics: \S D. S(\v.TrueP)
#   child1_category: "."

## Rules for commas

# lp
- category: S
  rule: lp
  semantics: \L R. R
  # child0_surf: ","

- category: NP
  rule: lp
  semantics: \L R. R
  # child0_surf: ","

- category: N
  rule: lp
  semantics: \L R. R
  # child0_surf: ","

- category: S\NP
  rule: lp
  semantics: \L R. R
  # child0_surf: ","

- category: NP\NP
  rule: lp
  semantics: \L R. R
  # child0_surf: ","

- category: NP/NP
  rule: lp
  semantics: \L R. R
  # child0_surf: ","

- category: NP
  rule: lp
  semantics: \L R. R
  child0_category: LQU

- category: N
  rule: lp
  semantics: \L R. R
  child0_category: LQU

# rp
- category: S
  rule: rp
  semantics: \L R. L
  child0_surf: ","

- category: NP
  rule: rp
  semantics: \L R. L
  # child0_surf: ","

- category: N
  rule: rp
  semantics: \L R. L
  # child0_surf: ","

- category: S\NP
  rule: rp
  semantics: \L R. L
  # child0_surf: ","

- category: NP\NP
  rule: rp
  semantics: \L R. L
  # child0_surf: ","

- category: NP/NP
  rule: rp
  semantics: \L R. L
  # child0_surf: ","

- category: N
  rule: rp
  semantics: \L R. L
  child1_category: RQU

# conj
- category: NP\NP
  rule: conj
  semantics: \L Q1 Q2 F1 F2. (Q2(F1, F2) & Q1(F1, F2))
  child0_surf: ","

- category: NP\NP
  rule: conj
  semantics: \L Q. Q
  child0_surf: ","
  child1_category: NP\NP

- category: NP\NP
  rule: conj
  semantics: \L Q1 Q2 F1 F2. (Q2(F1, F2) | Q1(F1, F2))
  child0_surf: ","
  child_any_surf: or

- category: S\S
  rule: conj
  semantics: \L S. S
  child0_surf: ","

- category: (N/N)\(N/N)
  rule: conj
  semantics: \L M1 M2 F x. M1(M2(F),x)
  child0_surf: ","

- category: (N/N)/(N/N)
  rule: conj
  semantics: \L M1 M2 F x. M1(M2(F),x)
  child0_surf: ","

- category: (S\NP)\(S\NP)
  rule: conj
  semantics: \L V2 V1 Q K. Q(\x.TrueP, \x.(V1(\F1 F2.F2(x),K) & V2(\F1 F2.F2(x),K))) # SICK-1469
  child0_surf: ","

- category: (S\NP)\(S\NP)
  rule: conj
  semantics: \L R. R
  child0_surf: ","
  child1_category: (S\NP)\(S\NP)
  # bak1-2-32

- category: ((S\NP)\(S\NP))\((S\NP)\(S\NP))
  rule: conj
  semantics: \L M1 M2 V Q K. M2(V,Q,\v.(M1(\F1 F2.F2,Q,K)(v)))
  # semantics: \L M1 M2 V Q K. (M1(V,Q,K) & M2(V,Q,K))
  child0_surf: ","

# "," NP => (S\NP)\(S\NP)
- category: (S\NP)\(S\NP)
  rule: ltc
  semantics: \L Q1 V Q2 K. (Q1(\x.TrueP, \x.TrueP) & Q2(\x.TrueP, \x.(V(\F1 F2.F2(x),K))))

# rtc 
# NP "," => S/S
- category: S/S
  rule: rtc
  semantics: \L R S. S


############### Semantic Templates  #################

##### Templates for NPs #####

## Common nouns
- category: N
  semantics: \E x. E(x)
  coq_type: Entity -> Prop

# ## Proper nouns
# - category: N
#   semantics: \E. E
#   pos: NNP

## Number words
- category: N
  semantics: \E. E
  pos: CD
  # fracas-330

## default existential interpretation
- category: NP
  semantics: \E F1 F2. exists x. (E(x) & F1(x) & F2(x))

## Pronouns
- category: NP
  semantics: \E F1 F2. exists x. ((x = E) & F1(x) & F2(x))
  pos: PRP

- category: NP\NP
  semantics: \E Q F1 F2. Q(\x.(E(x) & F1(x)), F2)

- category: (NP\NP)/(NP\NP) 
  semantics: \E M Q F1 F2. Q(\x.(E(x) & M(\G1 G2.G1(x),\w.TrueP,\w.TrueP) & F1(x)), F2)
  # semantics: \E M Q F1 F2. Q(\y. exists x. (E(x) & M(\G1 G2.G1(x),\w.TrueP,\w.TrueP) & F1(y)), F2)
  coq_type: Entity -> Prop

##### Templates for Determiners #####

## default existential interpretation
- category: NP/N
  semantics: \E F1 F2 F3. exists x. (F1(x) & F2(x) & F3(x))

##### Templates for Adverbs #####

- category: (N/N)/(N/N) 
  semantics: \E A F x. (E(x) & A(F,x))
  coq_type: Entity -> Prop

- category: (S\NP)\(S\NP)
  semantics: \E V Q K. V(Q, \v.(E(v) & K(v)))
  # semantics: \E V Q. Q(\w.TrueP, \x.(E(x) & V(\F1 F2.F2(x))))
  coq_type: Event -> Prop

- category: (S\NP)/(S\NP)
  semantics: \E V Q K. V(Q, \v.(E(v) & K(v)))
  coq_type: Event -> Prop

- category: S/S
  semantics: \E S K. S(K)

- category: (S/S)/NP
  semantics: \E Q S K. S(\v.(Q(\x.TrueP, \x.E(v,x)) & K(v)))
  # semantics: \E Q S K. (E(Q(\x.TrueP, \x.TrueP),S(K)) & S(K))
  coq_type: Prop -> Prop -> Prop

- category: (S/S)/(S/S)
  semantics: \E A S. E(A(S))

## default existentional interpretation for connectives
- category: ((S\NP)\(S\NP))/S
  semantics: \E S V Q K. Q(\x.TrueP, \x.(S(\v.TrueP) & V(\F1 F2.F2(x),K) & E(S(K), V(\F1 F2.F2(x),K))))
  coq_type: Entity -> Prop

- category: ((S\NP)\(S\NP))/((S\NP)\(S\NP))
  semantics: \E A V Q K. Q(\x.TrueP, \x.(A(V,\F1 F2.(F2(x) & E(x)))))
  coq_type: Entity -> Prop
  # ???

##### Templates for Modifiers #####

- category: N/N
  semantics: \E F x. (E(x) & F(x))
  coq_type: Entity -> Prop

- category: N/N
  semantics: \E F x. exists v.(E(v) & (Acc(v) = x) & F(x))
  coq_type: Event -> Prop
  pos: VBN

- category: N\N
  semantics: \E F x. (E(x) & F(x))
  coq_type: Entity -> Prop

- category: N\N
  semantics: \E F x. exists v.(E(v) & (Acc(v) = x) & F(x))
  coq_type: Event -> Prop
  pos: VBN

# - category: N/N
#   semantics: \E F x. exists v.(E(v) & (Acc(v) = x) & F(x))
#   coq_type: Event -> Prop
#   pos: JJ

# - category: N/N
#   semantics: \E F x. (E(x) & F(x))
#   coq_type: Entity -> Prop
#   pos: NN

# - category: N\N
#   semantics: \E F x. exists v.(E(v) & (Acc(v) = x) & F(x))
#   coq_type: Event -> Prop
#   pos: JJ

# - category: N\N
#   semantics: \E F x. (E(x) & F(x))
#   coq_type: Entity -> Prop
#   pos: NN

- category: (N/N)\NP
  semantics: \E Q F x. Q(\y.TrueP, \y.(E(x,y) & F(x)))
  coq_type: Entity -> Entity -> Prop

- category: ((S\NP)\(S\NP))/N
  semantics: \E F V Q K. Q(\x.TrueP, \x.(E(x) & V(\F1 F2.F2(x), K) & F(x)))
  coq_type: Entity -> Prop


##### Templates for Preposition #####

## nominal modifiers
- category: (NP\NP)/NP
  semantics: \E Q1 Q2 F1 F2. Q2(\x.(Q1(\w.TrueP, \y.exists v.(E(v,y) & (Subj(v) = x) & F1(x)))), F2)
  coq_type: Event -> Entity -> Prop
  # semantics: \E Q1 Q2 F1 F2. Q2(\x.(Q1(\w.TrueP, \y.E(x,y)) & F1(x)), F2)
  # SICK-987

- category: (NP\NP)/NP
  semantics: \E Q1 Q2 F1 F2. Q2(\x.(Q1(\w.TrueP, \y.(x = y)) & F1(x)), F2)
  # coq_type: Entity -> Entity -> Prop
  surf: of

- category: PP/NP
  semantics: \E Q v. Q(\x.TrueP, \x.E(v,x))
  coq_type: Event -> Entity -> Prop
  # semantics: \E Q x. Q(\y.TrueP, \y.E(x,y))
  # coq_type: Entity -> Entity -> Prop
  # SICK-987

- category: PP/PP
  semantics: \E F v1. exists v2. (F(v2) & E(v2,v1))
  coq_type: Event -> Event -> Prop
  # out of, bak1-2-02

- category: PP/S
  semantics: \E S v. (E(v) & S(\v.TrueP))
  coq_type: Event -> Prop
  # depending on

- category: PP/(S[ng=true]\NP)
  semantics: \E V v1. exists x. V(\F1 F2.F2(x),\v.TrueP)

- category: (NP\NP)/S
  semantics: \E S Q F1 F2. (Q(F1,F2) & S(\v.TrueP))

- category: ((S\NP)\(S\NP))/PP
  semantics: \E K1 V Q K2. Q(\x.TrueP, \x.(V(\F1 F2.F2(x), \v.(E(v) & K1(v) & K2(v)))))
  coq_type: Event -> Prop

- category: ((S\NP)\(S\NP))/NP
  semantics: \E Q1 V Q2 K. V(Q2, \v.Q1(\x.TrueP, \x.(E(v,x) & K(v))))
  # semantics: \E Q1 V Q2. Q2(\w.TrueP, \x.Q1(\w.TrueP, \y.(E(x,y) & V(\F1 F2.F2(x)))))
  coq_type: Event -> Entity -> Prop

# - category: ((S\NP)\(S\NP))/NP
#   semantics: \E Q1 V Q2 K. V(Q2, \v.Q1(\x.TrueP, \x.(E(v) & (Acc(v) = x) & K(v))))
#   pos: IN
#   coq_type: Event -> Prop

- category: ((S[adj=true]\NP)\(S[adj=true]\NP))/NP
  semantics: \E Q1 V Q2 K. Q2(\x.TrueP, \x.Q1(\y.TrueP, \y.(V(\F1 F2.F2(x), \w.TrueP) & E(x,y))))
  coq_type: Entity -> Entity -> Prop

- category: ((S\NP)\(S\NP))/(S\NP)
  semantics: \E V1 V2 Q K. Q(\x.TrueP, \x.V1(\F1 F2.(V2(\G1 G2.G2(x), \v.TrueP) & F2(x)), K))

# - category: ((S\NP)\(S\NP))/(S[ng=true]\NP)
#   semantics: \E V1 V2 Q K. Q(\x.TrueP, \x.V1(\F1 F2.(V2(\G1 G2.G2(x), \v.TrueP) & F2(x)), K))

- category: (NP\NP)/(S[ng=true]\NP)
  semantics: \E V Q F1 F2. Q(\x.V(\G1 G2.(G2(x) & F1(x)), \v.TrueP), F2)
  # semantics: \E V Q F. Q(\x.V(\G1 G2.(G2(x) & F(x))))

## than
- category: ((N/N)/(N/N))\(S[adj=true]\NP)
  semantics: \E V M F x. (V(\G1 G2. G2(x), \v.TrueP) & M(F,x))

- category: (((S\NP)\(S\NP))/((S\NP)\(S\NP)))/NP 
  semantics: \E Q1 M V Q2 K. M(V,Q2,\v.(Q1(\x.TrueP,\x.(E(v,x) & K(v)))))
  coq_type: Event -> Entity -> Prop
  # fracas-330

## as
- category: (((S\NP)\(S\NP))\((S\NP)\(S\NP)))/S
  semantics: \E S X. X
  # bak1-2-31

## as
- category: ((S\NP)\(S\NP))/((S\NP)\(S\NP))
  semantics: \E X. X
  # bak1-2-31

##### Templates for Verb phrases #####

## intransitive verbs
- category: S\NP
  semantics: \E Q K. Q(\x.TrueP, \x.exists v.(E(v) & (Subj(v) = x) & K(v)))
  coq_type: Event -> Prop

## non-constituent form
- category: S/NP
  semantics: \E Q K. Q(\x.TrueP, \x.exists v.(E(v) & (Subj(v) = x) & K(v)))
  coq_type: Event -> Prop

## transitive verbs
- category: (S\NP)/NP
  semantics: \E Q1 Q2 K. Q2(\x.TrueP, \x.Q1(\y.TrueP, \y.exists v.(E(v) & (Subj(v) = x) & (Acc(v) = y) & K(v))))
  coq_type: Event -> Prop

## perceptual verbs
- category: ((S\NP)/(S\NP))/NP
  semantics: \E Q1 V Q2 K. Q2(\x.TrueP, \x.exists v1.(E(v1) & (Subj(v1) = x) & V(Q1,\v2.(AccE(v1) = v2)) & K(v1)))
  coq_type: Event -> Prop
  # bak1-2-30

## PP form
- category: ((S\NP)/PP)/NP
  semantics: \E Q1 K1 Q2 K2. Q2(\x.TrueP, \x.Q1(\y.TrueP, \y.exists v.(E(v) & (Subj(v) = x) & (Acc(v) = y) & K1(v) & K2(v))))
  coq_type: Event -> Prop

- category: (S[pss=true]\NP)/(PP/NP)
  semantics: \E M Q K. Q(\x.TrueP, \x.exists v.(E(v) & M(\F1 F2.F2(x),v) & K(v)))
  coq_type: Event -> Prop

## control verbs, to 1
- category: (S\NP)/(S[to=true]\NP)
  semantics: \E V Q K. Q(\x.TrueP, \x.exists v.(E(v) & (Subj(v) = x) & AccI(v, V(\F1 F2.F2(x),\v.TrueP)) & K(v)))
  coq_type: Event -> Prop

## control verbs, to 2
- category: ((S\NP)/(S[to=true]\NP))/NP
  semantics: \E Q1 V Q2 K. Q2(\x.TrueP, \x.exists v1.(E(v1) & (Subj(v1) = x) & AccI(v1, V(Q1,\v2.TrueP)) & K(v1)))
  coq_type: Event -> Prop

## control verbs, ing
- category: ((S\NP)/(S[ng=true]\NP))/NP
  semantics: \E Q1 V Q2 K. Q2(\x.TrueP, \x.exists v1.(E(v1) & (Subj(v1) = x) & V(Q1,\v2.(AccE(v1) = v2)) & K(v1)))
  coq_type: Event -> Prop

# ditransitive verbs
- category: ((S\NP)/NP)/NP
  semantics: \E Q1 Q2 Q3 K. Q3(\x1.TrueP, \x1.Q2(\x2.TrueP, \x2.Q1(\x3.TrueP, \x3.exists v.(E(v) & (Subj(v) = x1) & (Acc(v) = x3) & (Dat(v) = x2) & K(v)))))
  coq_type: Event -> Prop

###
- category: (S\NP)/PP
  semantics: \E F Q K. Q(\x.TrueP, \x.exists v.(E(v) & (Subj(v) = x) & F(v) & K(v)))
  coq_type: Event -> Prop

### attitude verbs
- category: (S\NP)/S
  semantics: \E S Q K. Q(\x.TrueP, \x.exists v.(E(v) & (Subj(v) = x) & AccI(v,S(\w.TrueP)) & K(v)))
  coq_type: Event -> Prop

###
- category: (S\S)\NP
  semantics: \E Q S K. Q(\x.TrueP, \x.exists v.(E(x) & (Subj(v) = x) & AccI(v,S(\w.TrueP)) & K(v)))
  coq_type: Event -> Prop

- category: (S\NP)/S[qem=true]
  semantics: \E Q S K. Q(\x.TrueP, \x.exists v.(E(x) & (Subj(v) = x) & AccI(v,S(\w.TrueP)) & K(v)))
  coq_type: Event -> Prop

# - category: ((S\NP)/(S[b=true]\NP))/NP
#   semantics: \E Q1 V Q2. Q2(\w.TrueP, \x.Q1(\w.TrueP, \y.(E(x,y) & V(\F1 F2.F2(y)))))
#   coq_type: Entity -> Entity -> Prop


##### Templates for relative clauses #####

## who
- category: (NP\NP)/(S\NP)
  semantics: \E V Q F1 F2. Q(\x.(V(\G1 G2.G2(x), \v.TrueP) & F1(x)), F2)
  # semantics: \E V Q F1. Q(\x. (V(\F2 F3. F3(x)) & F1(x)))

## whom
- category: (NP\NP)/(S/NP)
  semantics: \E V Q F1 F2. Q(\x.(V(\G1 G2.G2(x), \v.TrueP) & F1(x)), F2)

## whose
- category: (NP\NP)/(NP\NP) 
  semantics: \E M Q F1 F2. Q(\y. exists x. (M(\G1 G2.G1(x),\w.TrueP,\w.TrueP) & Rel(x,y) & F1(y)), F2)
  coq_type: Entity -> Prop
  base: whose

- category: NP/(S/NP)
  semantics: \E V F1 F2. exists x. (V(\G1 G2.G2(x), \v.TrueP) & F1(x) & F2(x))

- category: ((NP\NP)/(S\NP))\(NP/NP)
  semantics: \E M V Q F1 F2. M(Q, \x.(F1(x) & F2(x)), \x.V(\G1 G2.G2(x), \v.TrueP))


##### Templates for connectives #####

## default conjunctive interpretation
- category: (S/S)/S
  semantics: \E S1 S2 K. (S2(\v.TrueP) & S1(\v.TrueP))
  # semantics: \E S1 S2 K. (S1(\v.TrueP) & S2(\v.TrueP) & E(S1(\v.TrueP), S2(K)))
  coq_type: Prop -> Prop -> Prop

- category: ((S\NP)\(S\NP))/S
  semantics: \E S V Q K. (V(Q,\v.TrueP) & S(\v.TrueP))
  # semantics: \E S V Q K. (V(Q,\v.TrueP) & S(\v.TrueP) & E(S(\v.TrueP), V(Q,K)))
  coq_type: Prop -> Prop -> Prop



########## Templates with syntactic features ##########


##### Templates for Copula #####

- category: ((S\NP[expl=true])/S[em=true])/(S[adj=true]\NP)
  semantics: \E V S Q K. V(\F1 F2.F2(S(K)))

# - category: (S\NP)/(S[pss=true]\NP)
#   semantics: \E V Q K. V(Q, K)

# - category: (S\NP)/(S[pss=true]\NP)
#   semantics: \E V Q K. V(Q, \v.(Past(v) & K(v)))
#   # semantics: \E V Q. Q(\w.TrueP, \x.V(\F1 F2.F2(x)))
#   pos: VBD

# - category: (S\NP)/(S[pss=true]\NP)
#   semantics: \E V Q K. V(Q, \v.(Present(v) & K(v)))
#   pos: VBZ, VBP
    # singular present

# - category: (S\(S[adj=true]\NP))/NP
#   semantics: \E Q1 Q2 K. Q2(\w.TrueP, \x.Q1(\w.TrueP, \y.E(x,y)))
#   # semantics: \E Q1 Q2. Q2(\w.TrueP, \x.Q1(\w.TrueP, \y.E(x,y)))
#   coq_type: Entity -> Entity -> Prop


##### Templates for Adjectives #####

- category: S[adj=true]\NP
  semantics: \E Q K. Q(\x.TrueP, \x.E(x))
  # semantics: \E Q K. Q(\x.TrueP, \x.exists v.(E(v) & (Acc(v) = x) & K(v)))
  coq_type: Entity -> Prop

- category: (S[adj=true]\NP)\NP
  semantics: \E Q1 Q2 K. Q2(\x.TrueP, \x.Q1(\y.TrueP, \y.E(x,y)))
  # semantics: \E Q1 Q2 K. Q2(\x.TrueP, \x.Q1(\y.TrueP, \y.exists v.(E(v) & (Acc(v) = x) & (Deg(v) = y) & K(v))))
  coq_type: Entity -> Entity -> Prop

# - category: (S[adj=true]\NP)/S[em=true]
#   semantics: \E S Q K. Q(\x.TrueP, \x.exists v.(E(v) & (Subj(v) = x) & AccI(v,S(\w.TrueP)) & K(v)))
#   semantics: \E S Q. Q(\x.TrueP, \x.E(x,S))
#   coq_type: Event -> Prop

## tough constructions
- category: (S[adj=true]\NP)/((S[to=true]\NP)/NP)
  semantics: \E V2 Q K. Q(\x.TrueP, \x.(exists y. V2(\F1 F2.F2(x),\F1 F2.F2(y),\v.(E(v) & K(v) ))))
  # semantics: \E V2 Q K. Q(\x.TrueP, \x.(E(exists y. V2(\F1 F2.F2(x),\F1 F2.F2(y),K))))
  coq_type: Event -> Prop


##### passives #####
- category: S[pss=true]\NP
  semantics: \E Q K. Q(\x.TrueP, \x.exists v.(E(v) & (Acc(v) = x) & K(v)))
  # semantics: \E Q K. Q(\x.TrueP, \x.exists v.(E(v) & (Acc(v) = x) & Cul(v) & K(v)))
  coq_type: Event -> Prop

- category: (S[pss=true]\NP)/PP
  semantics: \E F Q K. Q(\x.TrueP, \x.exists v.(E(v) & (Acc(v) = x) & F(v) & K(v)))
  coq_type: Event -> Prop


##### Templates for semantically empty expressions #####

## there
- category: NP[thr=true]
  semantics: \E F1 F2. F2(E)
  # semantics: \E F1 F2. exists x.F2(x)

- category: (S[to=true]\NP)/(S[b=true]\NP)
  semantics: \E X. X

- category: S[asup=true]\NP
  semantics: \E X. X

- category: (S/S)/(S[asup=true]\NP)
  semantics: \E X Y. Y


##### Templates for complementizers #####
- category: S[em=true]/S
  semantics: \E S K. S(K)


##### Templates for auxiliary expressions #####

### modal
- category: (S\NP)/(S[b=true]\NP)
  semantics: \E V Q K. Q(\x.TrueP, \x.V(\F1 F2.E(F2(x)),K))
  coq_type: Prop -> Prop
  # semantics: \E V. V
  # for logicproblms, eg. bak1-2-04, 1-2-07

# - category: (S\NP)/(S[to=true]\NP)
#   semantics: \E V Q K. Q(\x.TrueP, \x.V(\F1 F2.E(F2(x)),K))
#   coq_type: Prop -> Prop


############### Lexical entries #################

##### Lexical entries for NPs #####

- category: NP
  semantics: \E F1 F2. forall x. (F1(x) -> F2(x))
  # semantics: \E F1 F2. forall x. (_people(x) -> (F1(x) -> F2(x)))
  surf: everyone

- category: NP
  semantics: \E F1 F2. forall x. (F1(x) -> F2(x))
  # semantics: \E F1 F2. forall x. (_people(x) -> (F1(x) -> F2(x)))
  surf: everybody

- category: NP
  semantics: \E F1 F2. forall x. (F1(x) -> F2(x))
  surf: everything

- category: NP
  semantics: \E F1 F2. exists x. (F1(x) & F2(x))
  # semantics: \E F1 F2. forall x. (_people(x) -> (F1(x) -> F2(x)))
  base: anyone
  # bak1-2-9 --> existential
  # bak1-2-18 --> universal

- category: NP
  semantics: \E F1 F2. forall x. (F1(x) -> F2(x))
  # semantics: \E F1 F2. forall x. (_people(x) -> (F1(x) -> F2(x)))
  base: anybody

- category: NP
  semantics: \E F1 F2. forall x. (F1(x) -> F2(x))
  base: anything

- category: NP
  semantics: \E F1 F2. -exists x. (F1(x) & F2(x))
  # semantics: \E F1 F2. forall x. (F1(x) -> - F2(x))
  # semantics: \E F1 F2. forall x. (_people(x) -> (F1(x) -> - F2(x)))
  surf: nobody

- category: NP
  semantics: \E F1 F2. -exists x. (F1(x) & F2(x))
  # semantics: \E F1 F2. forall x. (F1(x) -> - F2(x))
  surf: nothing

- category: NP
  semantics: \E F1 F2. exists x. (F1(x) & F2(x))
  # semantics: \E F1 F2. exists x. (_people(x) & F1(x) & F2(x))
  surf: someone

- category: NP
  semantics: \E F1 F2. exists x. (F1(x) & F2(x))
  # semantics: \E F1 F2. exists x. (_people(x) & F1(x) & F2(x))
  surf: somebody

- category: NP
  semantics: \E F1 F2. exists x. (F1(x) & F2(x))
  surf: something

- category: NP
  semantics: \E F1 F2. forall x. (F1(x) -> F2(x))
  surf: all

- category: NP
  semantics: \E F1 F2. forall x. (F1(x) -> F2(x))
  surf: each

- category: NP
  semantics: \E F1 F2. exists x. (F1(x) & F2(x))
  surf: both

- category: NP
  semantics: \E F1 F2. (exists x. F1(x) & forall x. (F1(x) -> - F2(x)))
  surf: neither

- category: N
  semantics: \E x. (x = x)
  base: one

- category: N
  semantics: \E x. (x = x)
  base: group

- category: N/N
  semantics: \E F. F
  base: one

- category: N/N
  semantics: \E F. F
  base: other

- category: N/N
  semantics: \E F. F
  base: few
  # a few

##### Lexical entries for determiners #####

# ### DTS entries for pronouns
# - category: NP
#   semantics: \E F1 F2. (F1(@) & F2(@))
#   surf: he

# - category: NP
#   semantics: \E F1 F2. (F1(@) & F2(@))
#   surf: she

# - category: NP/N
#   semantics: \E F1 F2 F3. exists x. (F1(x) & ArgOf(x,@) & F2(x) & F3(x))
#   surf: his

# - category: NP/N
#   semantics: \E F1 F2 F3. exists x. (F1(x) & ArgOf(x,@) & F2(x) & F3(x))
#   surf: her

# - category: NP/N
#   semantics: \E F1 F2 F3. exists x. (F1(x) & ArgOf(x,@) & F2(x) & F3(x))
#   surf: its

- category: NP/N
  # semantics: \E F1 F2 F3. forall x. (F1(x) & F2(x) -> F3(x))
  semantics: \E F1 F2 F3. forall x. (F1(x) -> (F2(x) -> F3(x)))
  surf: every

- category: NP/N
  # semantics: \E F1 F2 F3. forall x. (F1(x) & F2(x) -> F3(x))
  semantics: \E F1 F2 F3. forall x. (F1(x) -> (F2(x) -> F3(x)))
  surf: all

- category: NP/N
  # semantics: \E F1 F2 F3. forall x. (F1(x) & F2(x) -> F3(x))
  semantics: \E F1 F2 F3. forall x. (F1(x) -> (F2(x) -> F3(x)))
  surf: each

- category: NP/N
  # semantics: \E F1 F2 F3. forall x. (F1(x) & F2(x) -> F3(x))
  semantics: \E F1 F2 F3. forall x. (F1(x) -> (F2(x) -> F3(x)))
  surf: any

- category: NP/N
  semantics: \E F1 F2 F3. exists x. (F1(x) & F2(x) & F3(x))
  surf: some

- category: NP/N
  semantics: \E F1 F2 F3. exists x. (F1(x) & F2(x) & F3(x))
  surf: a

- category: NP/N
  semantics: \E F1 F2 F3. exists x. (F1(x) & F2(x) & F3(x))
  surf: an

- category: NP/N
  semantics: \E F1 F2 F3. exists x. (F1(x) & F2(x) & F3(x))
  # semantics: \E F1 F2 F3. F3(Pi1(@(exists x.(F1(x) & F2(x)))))
  # semantics: \E F1 F2 F3. (F2(Pi1(@(exists x.F1(x)))) & F3(Pi1(@(exists x.F1(x)))))
  surf: the

- category: NP/N
  semantics: \E F1 F2 F3. Most(\x(F1(x) & F2(x)), F3)
  surf: most

- category: NP/N
  semantics: \E F1 F2 F3. exists x. (F1(x) & F2(x) & F3(x))
  surf: both

- category: NP/N
  semantics: \E F1 F2 F3. -exists x. (F1(x) & F2(x) & F3(x))
  # semantics: \E F1 F2 F3. forall x. (F1(x) -> (F2(x) -> - F3(x)))
  # semantics: \E F1 F2 F3. forall x. (F1(x) & F2(x) -> - F3(x))
  surf: neither

- category: NP/N
  semantics: \E F1 F2 F3. -exists x. (F1(x) & F2(x) & F3(x))
  # semantics: \E F1 F2 F3. forall x. (F1(x) & F2(x) -> - F3(x))
  # semantics: \E F1 F2 F3. forall x. (F1(x) -> (F2(x) -> - F3(x)))
  surf: "no"

- category: NP/N
  # semantics: \E F1 F2 F3. forall x. (F1(x) & F2(x) -> - F3(x))
  semantics: \E F1 F2 F3. forall x. (F1(x) -> (F2(x) -> - F3(x)))
  surf: few

- category: NP/NP
  semantics: \E Q F1 F2. forall x. (Q(\y.TrueP, \y.((x = y) & F1(y))) -> F2(x))
  surf: all

- category: NP\NP
  semantics: \E Q F1 F2. forall x. (Q(\y.TrueP, \y.((x = y) & F1(y))) -> F2(x))
  surf: all

- category: NP/NP
  semantics: \E Q. Q
  surf: such

- category: NP/NP
  semantics: \E Q F1 F2. forall x. (Q(\y.TrueP, \y.((x = y) & F2(y))) -> F1(x))
  surf: only
  #hodges10-5

##### Floating quantifiers #####

- category: (S\NP)/(S\NP)
  semantics: \E V Q K. forall x. (Q(\y.TrueP, \y.(x = y)) -> V(\F1 F2.F2(x), K))
  surf: all

- category: (S\NP)\(S\NP)
  semantics: \E V Q K. forall x. (Q(\y.TrueP, \y.(x = y)) -> V(\F1 F2.F2(x), K))
  surf: all

- category: (S\NP)/(S\NP)
  semantics: \E V Q K. forall x. (Q(\y.TrueP, \y.(x = y)) -> V(\F1 F2.F2(x), K))
  surf: each

- category: (S\NP)\(S\NP)
  semantics: \E V Q K. forall x. (Q(\y.TrueP, \y.(x = y)) -> V(\F1 F2.F2(x), K))
  surf: each


##### Modifiers #####

- category: N/N
  semantics: \E F1 F2 F3. Most(\x.(F1(x) & F2(x)), F3)
  surf: most

##### Adverb #####

- category: (S\NP)/(S\NP)
  semantics: \E V1. V1
  coq_type: Entity -> Prop
  surf: also
  # bak1-2-14

- category: (S\NP)\(S\NP)
  semantics: \E V1. V1
  coq_type: Entity -> Prop
  surf: together

##### Prepositions #####

- category: ((S\NP)\(S\NP))/NP
  semantics: \E Q1 V Q2 K. V(Q2, \v.Q1(\x.TrueP, \x.((Subj(v) = x) & K(v))))  # subject wide scope
  # semantics: \E Q1 V Q2 K. Q1(\x.TrueP, \x.V(Q2,\v.((Subj(v) = x) & K(v))))  # subject narrow scope
  surf: by

- category: ((S\NP)\(S\NP))/(S[ng=true]\NP)
  semantics: \E V1 V2 Q K. Q(\x.TrueP, \x.V1(\F1 F2.(V2(\G1 G2.G2(x),\v.TrueP) & -F2(x)),K))
  surf: without

- category: (S[to=true]\NP)/(S[b=true]\NP)
  semantics: \E V Q K. V(Q,K)
  surf: to

# in front of
- category: (S\NP)\(S\NP)
  semantics: \L R V Q K. V(Q,\v.R(\x.TrueP,\x.(_in_front_of(v,x) & K(v))))
  rule: fa
  child0_surf: in
  child1_child0_child0_surf: front

##### Verbs #####

# - category: (S[dcl=true]\NP)/(S[to=true]\NP)
#   semantics: \E V Q. Q(\w.TrueP, \x.V(\F1 F2.F2(x)))
#   coq_type: Entity -> Prop -> Prop
#   base: use

## factive verbs
- category: (S\NP)/(S[to=true]\NP)
  semantics: \E V Q K. Q(\x.TrueP, \x.exists v.(E(v) & (Subj(v) = x) & AccI(v,V(\F1 F2.F2(x), \v.TrueP)) & K(v)))
  base: manage

- category: (S\NP)/(S[to=true]\NP)
  semantics: \E V Q K. Q(\x.TrueP, \x.exists v.(E(v) & (Subj(v) = x) & AccI(v,V(\F1 F2.F2(x), \v.TrueP)) & K(v)))
  # semantics: \E V Q. Q(\x.TrueP, \x.V(\F1 F2.E(x,F2(x))))
  base: fail

- category: (S\NP)/S[em=true]
  semantics: \E S Q K. Q(\x.TrueP, \x.exists v.(E(v) & (Subj(v) = x) & AccI(v,S(\w.TrueP)) & K(v)))
  base: know

- category: (S\NP)/S[em=true]
  semantics: \E S Q K. Q(\x.TrueP, \x.exists v.(E(v) & (Subj(v) = x) & AccI(v,S(\v.TrueP)) & K(v)))
  base: manage

- category: (S\NP)/S[em=true]
  semantics: \E S Q K. Q(\x.TrueP, \x.exists v.(E(v) & (Subj(v) = x) & AccI(v,S(\v.TrueP)) & K(v)))
  base: fail


##### Copula #####

- category: (S\NP)/(S\NP)
  semantics: \E V Q K. V(Q, K)
  # semantics: \E V Q K. Q(\x.TrueP, \x.exists v.(V(\F1 F2.F2(x), \v.TrueP) & Loc(v,x) & K(v)))
  base: be

- category: (S\NP)/NP
  semantics: \E Q1 Q2 K. Q2(\x.TrueP, \x.Q1(\y.TrueP, \y.(x = y)))
  base: be

- category: (S\NP[thr=true])/NP
  semantics: \E Q1 Q2 K. Q1(\x.TrueP, \x.exists v.((Subj(v) = Subj(v)) & K(v)))
  # semantics: \E Q1 Q2 K. Q1(\x.TrueP, \x.exists v.(K(v)))

- category: (S\NP)/PP
  semantics: \E F Q K. Q(\x.TrueP, \x.exists v.(F(v) & (Subj(v) = x) & K(v)))
  # semantics: \E F Q K. Q(\x.TrueP, \x.F(x))
  base: be
  # SICK-987

- category: (S\PP)/NP
  # semantics: \E F Q K. Q(\x.TrueP, \x.exists v.(F(v) & K(v)))
  semantics: \E F Q K. Q(\x.TrueP, \x.exists v.(F(v) & (Subj(v) = x) & K(v)))
  base: be

# - category: (S\NP)/(S[adj=true]\NP)
#   semantics: \E X. X
#   base: be

# - category: (S\NP)/(S[adj=true]\NP)
#   semantics: \E X. X
#   base: be

# - category: ((S\NP[expl=true])/(S[to=true]\NP))/(S[adj=true]\NP)
#   semantics: \E A V1 Q K. A(\F1 F2.F2(V1(Q,\v.TrueP)),K)
#   base: be
#   it is easy to ...

# - category: (S\NP)/(S\NP)
#   semantics: \E X. X
#   base: be
#   # bak1-2-30

##### Negation #####

- category: S/S
  semantics: \E S. -S
  base: not

- category: NP/NP
  semantics: \E Q F1 F2. -Q(F1,F2)
  base: not

- category: (S\NP)\(S\NP) 
  semantics: \E V Q K. -Q(\w.TrueP, \x.V(\F1 F2.F2(x), K))
  surf: not
  # semantics: \E V Q K. Q(\x.TrueP, \x.-V(\F1 F2.F2(x), K))
  # eg. bak1-2-27

- category: (S\NP)\(S\NP) 
  semantics: \E V Q K. -Q(\x.TrueP, \x.V(\F1 F2.F2(x), K))
  # semantics: \E V Q K. Q(\x.TrueP, \x.-V(\F1 F2.F2(x), K))
  surf: n't

- category: (S\NP)\(S\NP) 
  semantics: \E V Q K. -Q(\x.TrueP, \x.V(\F1 F2.F2(x), K))
  # semantics: \E V Q K. Q(\x.TrueP, \x.-V(\F1 F2.F2(x), K))
  surf: never

# - category: (S[adj=true]\NP)/(S[adj=true]\NP)
#   semantics: \E V Q. Q(\w.TrueP, \x.-V(\F1 F2.F2(x)))
#   surf: not

# - category: (S[dcl=true]\NP)/NP
#   semantics: \E Q1 Q2. Q2(\w.TrueP, \x.-(Q1(\w.TrueP, \y.(x = y))))
#   surf: isn't

# - category: (S[dcl=true]\NP)/NP
#   semantics: \E Q1 Q2. Q2(\w.TrueP, \x.-(Q1(\w.TrueP, \y.(x = y))))
#   surf: aren't

# - category: (S[adj=true]\NP)/(S[adj=true]\NP)
#   semantics: \E V Q. Q(\w.TrueP, \x.-V(\F1 F2.F2(x)))
#   surf: isn't

# - category: (S[adj=true]\NP)/(S[adj=true]\NP)
#   semantics: \E V Q. Q(\w.TrueP, \x.-V(\F1 F2.F2(x)))
#   surf: aren't

# - category: (S[dcl=true]\NP)/(S\NP)
#   semantics: \E V Q. Q(\w.TrueP, \x.-V(\F1 F2.F2(x)))
#   surf: don't

# - category:  (S[dcl=true]\NP)/(S\NP)
#   semantics: \E V Q. Q(\w.TrueP, \x.-V(\F1 F2.F2(x)))
#   surf: doesn't

# - category:  (S[dcl=true]\NP)/(S\NP)
#   semantics: \E V Q. Q(\w.TrueP, \x.-V(\F1 F2.F2(x)))
#   surf: didn't


##### Adjectives #####

- category: S[adj=true]\NP
  semantics: \E Q. Q(\x.TrueP, \x.E(x))
  surf: "true"

- category: S[adj=true]\NP
  semantics: \E Q. Q(\x.TrueP, \x.E(x))
  surf: "false"

- category: N/N
  semantics: \E F x. E(F(x))
  surf: former


##### Auxiliary expressions #####

- category: (S\NP)/(S[b=true]\NP)
  semantics: \E V Q K. V(Q, K)
  surf: do

- category: (S\NP)/(S[b=true]\NP)
  semantics: \E V Q K. V(Q, K)
  surf: does

- category: (S\NP)/(S[b=true]\NP)
  semantics: \E V Q K. V(Q, K)
  # semantics: \E V Q K. V(Q,\v.(Past(v) & Cul(v) & K(v)))
  surf: did

- category: (S\NP)/(S[pt=true]\NP)
  semantics: \E V Q K. V(Q, K)
  # semantics: \E V Q K. V(Q, \v.(Past(v) & Cul(v) & K(v)))
  base: have
  # pos: VBD

- category: (S\NP)/(S[b=true]\NP)
  semantics: \E V Q K. V(Q, K)
  base: will

- category: (S\NP)/(S[to=true]\NP)
  semantics: \E V Q K. V(Q, K)
  # semantics: \E V Q K. V(Q, \v.(Past(v) & Cul(v) & K(v)))
  base: use
  pos: VBD


##### Connectives #####

- category: (S/S)/S
  semantics: \E S1 S2 K. (S1(\v.TrueP) -> S2(K))
  surf: if

- category: ((S\NP)\(S\NP))/S
  semantics: \E S1 V1 Q K. (S1(\v.TrueP) -> V1(Q,K))
  surf: if

- category: (S/S)/S
  semantics: \E S1 S2 K. (-S1(\v.TrueP) -> S2(K))
  surf: unless

- category: ((S\NP)\(S\NP))/S
  semantics: \E S V1 Q K. (-S(\v.TrueP) -> V1(Q,K))
  surf: unless
  # bak1-2-20

- category: ((S\NP)\(S\NP))/S
  semantics: \E S V Q K. V(Q,\v2.(S(\v1.E(v1,v2)) & K(v2)))
  coq_type: Event -> Event -> Prop
  # semantics: \E S V Q. E(S, V(Q))
  # coq_type: Prop -> Prop -> Prop
  surf: after

- category: ((S\NP)\(S\NP))/S
  semantics: \E S V Q K. V(Q,\v2.(S(\v1.E(v1,v2)) & K(v2)))
  coq_type: Event -> Event -> Prop
  surf: before

- category: (S/S)/S
  semantics: \E S1 S2 K. (S1(\v.TrueP) -> S2(K))
  base: when

- category: (S\NP)/(S\NP)
  semantics: \E V Q K. V(Q,K)
  base: either

- category : N/N
  semantics: \E X.X
  base: either

- category : NP/NP
  semantics: \E X.X
  base: either

- category : N/N
  semantics: \E X.X
  base: both

- category : NP/NP
  semantics: \E X.X
  base: both

- category : N/N
  semantics: \E X.X
  base: several

- category : NP/NP
  semantics: \E X.X
  base: several

- category : NP/NP
  semantics: \E X.X
  base: almost
  # bak1-2-36

##### Possesive particle #####

- category: (NP/N)\NP
  semantics: \E Q F1 F2 F3. exists x.((Q(\w.TrueP, \y.Rel(x,y)) & F1(x)) & F2(x) & F3(x))
  surf: "'s"

- category: (NP/N)\NP
  semantics: \E Q F1 F2 F3. exists x.((Q(\w.TrueP, \y.Rel(x,y)) & F1(x)) & F2(x) & F3(x))
  surf: "'"

##### Sentence final particle #####

- category: .
  semantics: \S X. X
  surf: "."

- category: =true,
  semantics: \S X. X
  surf: ","

